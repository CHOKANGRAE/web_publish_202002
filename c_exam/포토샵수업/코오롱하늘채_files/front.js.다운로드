////////////////////////////////////////////////////////////////////////////////
////																		////
////////////////////////////////////////////////////////////////////////////////
"use strict";

(function(root, factory) {

	if(typeof define === "function" && define.amd) {
		define(factory);
	}
	else if(typeof exports === "object") {
		module.exports = factory();
	}
	else {
		root.creator = factory();
	}

} (this, function () {

	if("undefined" === typeof window.NFront) {
		NFront = window.NFront = {};	
		NFront.Util = {};				
	}

	/**
	 * 기본적인 기능 정리
	 */
	var Util = NFront.Util = {
			
		/**
		 * #PURE
		 * null 체크
		 * @param  {Object}	value
		 * @return {Boolean}
		 */
		isNull			: function(value) {
			return (value != null && value != undefined && value != "" && value != "null") ? false : true;
		},

		/**
		 * #PURE
		 * 문자열 null 체크
		 * @return {String}
		 */
		nvlString		: function() {
			var parameters = arguments;

			switch(parameters.length) {

				case 1	:

					var value = parameters[parameters.length - 1];

					return (!Util.isNull(value)) ? value : "";

					break;

				case 2	:

					var value		= parameters[parameters.length - 2],
						repairValue	= parameters[parameters.length - 1];

					return (!Util.isNull(value)) ? value : repairValue;

					break;

				default	:
					console.log("NOT FOUNDev ARGUMENTS");

			}
		},

		/**
		 * #PURE
		 * 숫자 null 체크
		 * @return {Number}
		 */
		nvlNumber		: function() {
			var parameters = arguments;

			switch(parameters.length) {

				case 1	:

					var value = parameters[parameters.length - 1];

					return (!Util.isNull(value)) ? value : 0;

					break;

				case 2	:

					var value		= parameters[parameters.length - 2],
						repairValue	= parameters[parameters.length - 1];

					return (!Util.isNull(value)) ? value : repairValue;

					break;

				default	:
					console.log("NOT FOUNDev ARGUMENTS");

			}
		},


		/**
		 * #PURE
		 * 넘어온 value 에 세 자리마다 콤마를 찍어서 반환
		 * @param  {?}	  value
		 * @return {String}
		 */
		comma			: function(value) {
			var source		= value.toString().replace(/,/g,''),
				length		= source.length,
				returnValue	= source.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
			
			return returnValue;
		},
		
		commaInit		: function(obj) {
			
			$(obj).on("click", function(){
				var value = $(this).val();
				$(this).val(value.toString().replace(/,/g,''));
			});
				
			$(obj).on("blur", function(){
				var value 		= $(this).val();
				var source		= value.toString().replace(/,/g,'');
				var returnValue	= source.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
				$(this).val(returnValue);
			});
		},

		checkByte		: function(value) {
			var byte = 0;

			for (var i = 0; i < value.length; i++) {

				var char = escape(value.charAt(i));

				if(char.length == 1) {
					byte ++;
				}
				else if (char.indexOf("%u") != -1) {
					byte += 2;
				}
				else if (char.indexOf("%") != -1) {
					byte ++;
				}
			}

			return byte;
		},

		/**
		 * #JQUERY
		 * 비동기 통신 post
		 * @param {String} uri
		 * @param {json}   data
		 * @param {String} dataType
		 */
		post			: function(uri, data, dataType) {
			var promise	= $.Deferred();

			$.post(uri, data, function(result) { promise.resolve(result); }, dataType);

			return promise;
		},

		/**
		 * #JQUERY
		 * 비동기 통신 get
		 * @param {String} uri
		 * @param {json}   data
		 * @param {String} dataType
		 */
		get				: function(uri, data, dataType) {
			var promise	= $.Deferred();

			$.get(uri, data, function(result) { promise.resolve(result); }, dataType);

			return promise;
		},
		
		download: function(rnm, snm){
			location.href='/download?rnm=' + encodeURIComponent(rnm) + '&snm=' + encodeURIComponent(snm);
		},
		
		randomstr: function(string_length) {
			var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";			
			var randomstring = '';
			for (var i=0; i<string_length; i++) {
				var rnum = Math.floor(Math.random() * chars.length);
				randomstring += chars.substring(rnum,rnum+1);
			}
			return randomstring;
		},
		
		checkPassword: function(password, id){
		    
		    if(!/^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,15}$/.test(password)){            
		        alert('8~15자리 이내 영문,숫자,특수문자 조합으로 입력해 주십시오.');
		        $('#pwd').val('').focus();
		        return false;
		    }    
		    var checkNumber = password.search(/[0-9]/g);
		    var checkEnglish = password.search(/[a-z]/ig);
		    if(checkNumber <0 || checkEnglish <0){
		        alert("숫자와 영문자를 혼용하여야 합니다.");
		        $('#pwd').val('').focus();
		        return false;
		    }
		    if(/(\w)\1\1\1/.test(password)){
		        alert('같은 문자를 4번 이상 사용하실 수 없습니다.');
		        $('#pwd').val('').focus();
		        return false;
		    }
		        
		    if(password.search(id) > -1){
		        alert("비밀번호에 아이디가 포함되었습니다.");
		        $('#pwd').val('').focus();
		        return false;
		    }
		    
		    return true;
		},
		
		checkBatchimEnding: function (word) {
			  if (typeof word !== 'string') return null;
			 
			  var lastLetter = word[word.length - 1];
			  var uni = lastLetter.charCodeAt(0);
			 
			  if (uni < 44032 || uni > 55203) return null;
			 
			  return (uni - 44032) % 28 != 0;
		},
		
		print: function(){
			var initBody = document.body.innerHTML;
			var html = document.querySelector('html');

			window.onbeforeprint = function(){
				document.body.innerHTML = document.querySelector('#print-area').innerHTML;
			}
			window.onafterprint = function(){
				 document.body.innerHTML = initBody;
				 window.location.reload();
			}
			window.print();
		},
		
		interestCheck: function(bd_seq){
			//uri, data, dataType
			var param = {'bd_seq' : bd_seq};
			
			NFront.Util.post('/member/interestProc', param, 'json').done(function(data) {								
				if(data.code == '1111'){
					location.href = '/login';
				}
				else{
					alert(data.msg);
				}				
			}).fail(function() {  });
			
		},
		
		loadMap: function(bd_seq){
			ui.layerpopup.open('/sale/mapView/'+bd_seq);
		}
	};
	
	var Valid = NFront.Valid = {
			checkEssential: function (id) {
				var str = $('#' + id).val();
				var alt = $('#' + id).attr('alt');

				if ($.trim(str) == '') {					
					var josa = Util.checkBatchimEnding(alt)? '을':'를';					
					alert(alt + josa + ' 입력해 주세요.');
					return true;
				}
			},

			checkBlank: function (id) {
				var str = $('#' + id).val();
				var alt = $('#' + id).attr('alt');

				if ($.trim(str).length != str.length) {
					alert(alt + '에 빈칸이 포함되어 있습니다.');
					return true;
				}
			},

			checkLength: function (id1, id2, min, max) {
				var str1 = $('#'+id1+'').val();
				var alt1 = $('#'+id1+'').attr('alt');
				var alt2 = $('#'+id2+'').attr('alt');
				var str2 = '';
				var alt = '';

				if ('' != id2) {
					str2 = $('#' + id2).val();
					alt = alt1 + '와(과) ' + alt2;
				}
				else {
					alt = alt1;
				}

				if ('' != min && min > str1.length + str2.length) {
					alert(alt+'은(는) 최소 '+min+'자를 입력하셔야 합니다.');				
					return true;
				}

				if ('' != max && max < str1.length + str2.length) {				
					alert(alt + '의 입력길이를 초과하였습니다.\n최대 ' + max + '자 입니다.');
					return true;
				}
			},
			
			onlyNumber: function (id) {
				var str = $('#'+id+'').val();
				var alt = $('#'+id+'').attr('alt');
				var pattern=/^[0-9]+$/;
				
				if(''!=str&&!pattern.test(str)){
					alert(alt+'에 숫자만 입력해 주세요.');
					return true;
				}
			},

			onlyNumberEng: function (id) {
				var str = $('#' + id).val();
				var alt = $('#' + id).attr('alt');
				var pattern = /^[a-zA-Z0-9]+$/;

				if ('' != str && !pattern.test(str)) {
					alert(alt + '에 숫자와 영문자만 입력하세요.');
					return true;
				}
			},

			checkKorean: function (id) {
				var str = $('#' + id).val();
				var alt = $('#' + id).attr('alt');

				for (var i = 0; i < str.length; i++) {
					if (128 < str.charCodeAt(i)) {
						alert(alt + '에 한글을 입력하였습니다.');
						return true;
					}
				}
			},

			chgPrice: function (obj) {
				var price = obj.value.replace(',', '');

				while (price.indexOf(',') > 0) {
					price = price.replace(',', '');
				}

				var pattern = /^[0-9]+$/;

				if (pattern.test(price)) {
					obj.value = price;
				}
				else {
					obj.value = 0;
				}
			},

			number_format: function (f) {
				var len;
				var str = '' + f;
				var str1 = '';

				str = str.replace(/,/g, '');
				len = str.length;

				if (len > 3) {
					for (var i = 0; len - i - 3 > 0; i += 3) {
						str1 = "," + str.substring(len - 3 - i, len - i) + str1;
					}

					str1 = str.substring(0, len - i) + str1;
					f = str1;
				}

				return f;
			},

			checkNumber: function (obj) {
				NDev.Valid.chgPrice(obj);
				obj.select();
			},

			checkNumber2: function (obj) {
				var pattern = /^[0-9]+$/;

				if (pattern.test(obj.value)) {
					obj.value =	NDev.Valid.number_format(parseInt(obj.value));
				}
				else {
					alert('숫자만 입력해주세요.');
					obj.value = 0;
					obj.focus();
				}
			},

			parseNumber: function (num) {
				num = new String(num);
				num = NDev.Valid.remove(num, ',');

				if (num.length==0 || isNaN(num)) {
					return 0;
				}

				return Number(num);
			},

			remove: function (str, gubun) {
				return str.split(gubun).join('');
			},

			_ID: function (obj) {
				return document.getElementById(obj);
			},

			allChk: function (all, name) {
				var checks = document.getElementsByName(name);
				var val = true;

				if (all.checked == false) {
					val = false;
				}

				for (var i = 0; i < checks.length ; i++) {
					checks[i].checked = val;
				}
			},

			goPage: function (no) {
				document.frmSearch.currentPage.value = no;
				document.frmSearch.submit();
			},

			goSubPage: function (no){
				document.frmSearch.currentSubPage.value = no;
				document.frmSearch.submit();
			},

			copySEQ: function (seq) {
				window.clipboardData.setData('text', seq);
				alert('번호를 클립보드에 복사했습니다.');
			},

			/**
			 * chkForm(form)
			 *
			 * 입력박스의 null 유무 체크와 패턴 체크
			 *
			 * @Usage	<form onSubmit="return chkForm(this)">
			 */

			chkForm: function (form) {

				var reschk = 0;

				for (i = 0; i < form.elements.length; i++) {
					currEl = form.elements[i];

					if (currEl.disabled) {
						continue;
					}

					if (currEl.getAttribute('required') != null) {
						if (currEl.type=='checkbox' || currEl.type=='radio') {
							if (!NDev.Valid.chkSelect(form, currEl, currEl.getAttribute('msgR'))) {
								return false;
							}
						}
						else {
							if (!NDev.Valid.chkText(currEl,currEl.value,currEl.getAttribute('msgR'))) {
								return false;
							}
						}
					}

					if (currEl.getAttribute('label')=='주민등록번호'  && currEl.getAttribute('name') == 'resno[]' && currEl.value.length > 0) {
						reschk = 1;
					}

					if (currEl.getAttribute('option')!=null && currEl.value.length>0){
						if (!chkPatten(currEl,currEl.getAttribute('option'),currEl.getAttribute('msgO'))) {
							return false;
						}
					}

					if (currEl.getAttribute('minlength')!=null){
						if (!chkLength(currEl,currEl.getAttribute('minlength'))) {
							return false;
						}
					}
				}

				if (form.password2) {
					if (form.password.value!=form.password2.value) {
						alert('비밀번호가 일치하지 않습니다.');
						form.password.value = '';
						form.password2.value = '';
						return false;
					}
				}

				if (reschk && !NDev.Valid.chkResno(form)) {
					return false;
				}

				if ((form.nickname) && (form.nickname != "undefined")) {
					if (form.nickname.value.length > 1 && form.chk_nickname.value.length == 0) {
						alert("닉네임 중복을 체크 하셔야 합니다");
						return false ;
					}
				}

				if (form.chkSpamKey) {
					form.chkSpamKey.value = 1;
				}

				if (document.getElementById('avoidDbl')) {
					document.getElementById('avoidDbl').innerHTML = '--- 데이타 입력중입니다 ---';
				}

				return true;
			},

			chkLength: function (field, len) {
				text = field.value;

				if ($.trim(text.length) < len) {
					alert(len + '자 이상 입력하셔야 합니다');
					field.focus();
					return false;
				}

				return true;
			},

			chkText: function (field, text, msg) {
				text = $.trim(text);

				if (text == '') {
					var caption = field.parentNode.parentNode.firstChild.innerText;

					if (!field.getAttribute('label')) {
						field.setAttribute('label', (caption) ? caption : field.name);
					}

					if (!msg) {
						msg = '[' + field.getAttribute('label') + '] 필수입력사항';
					}

					alert(msg);

					if (field.tagName != 'SELECT') {
						field.value = '';
					}

					if (field.type!='hidden' && field.style.display!='none') {
						field.focus();
					}

					return false;
				}
				return true;
			},

			chkSelect: function (form, field, msg) {
				var ret = false;

				fieldname = eval('form.elements["' + field.name + '"]');

				if (fieldname.length) {
					for (j = 0; j < fieldname.length; j++) {
						if (fieldname[j].checked) {
							ret = true;
						}
					}
				}
				else {
					if (fieldname.checked) {
						ret = true;
					}
				}

				if (!ret) {
					if (!field.getAttribute('label')) {
						field.setAttribute(filed.name);
					}

					var msg2 = '[' + field.getAttribute('label') + '] 필수선택사항';

					if (msg) {
						msg2 += "\n\n" + msg;
					}

					alert(msg2);
					field.focus();

					return false;
				}

				return true;
			},

			chkPatten: function (field, patten, msg) {
				var regNum = /^[0-9]+$/;
				var regEmail = /^[^"'@]+@[._a-zA-Z0-9-]+\.[a-zA-Z]+$/;
				var regUrl = /^(http\:\/\/)*[.a-zA-Z0-9-]+\.[a-zA-Z]+$/;
				var regAlpha = /^[a-zA-Z]+$/;
				var regHangul = /[가-힣]/;
				var regHangulEng = /[가-힣a-zA-Z]/;
				var regHangulOnly = /^[가-힣]*$/;
				var regId = /^[a-zA-Z0-9]{1}[^"']{3,9}$/;
				var regPass = /^[a-zA-Z0-9_-]{4,12}$/;

				patten = eval(patten);

				if (!patten.test(field.value)) {
					var caption = field.parentNode.parentNode.firstChild.innerText;

					if (!field.getAttribute('label')) {
						field.setAttribute('label', (caption) ? caption : field.name);
					}

					var msg2 = '[' + field.getAttribute('label') + '] 입력형식오류';

					if (msg) {
						msg2 += '\n\n' + msg;
					}

					alert(msg2);
					field.focus();

					return false;
				}
				return true;
			},

			chkRadioSelect: function (form, field, val, msg) {
				var ret = false;

				fieldname = eval('form.elements["' + field + '"]');

				if (fieldname.length) {
					for (j=0;j<fieldname.length;j++) {
						if (fieldname[j].checked) {
							ret = fieldname[j].value;
						}
					}
				}
				else {
					if (fieldname.checked) {
						ret = true;
					}
				}

				if (val != ret) {
					alert(msg);
					return false;
				}

				return true;
			},

			formOnly: function (form) {
				var i,idx = 0;
				var rForm = document.getElementsByTagName('form');

				for (i = 0; i < rForm.length; i++) {
					if (rForm[i].name==form.name) {
						idx++;
					}
				}

				return (idx == 1) ? form : form[0];
			},

			chkResno: function (form) {
				var resno = form['resno[]'][0].value + form['resno[]'][1].value;

				fmt = /^\d{6}[1234]\d{6}$/;

				if (!fmt.test(resno)) {
					alert('잘못된 주민등록번호입니다.');
					return false;
				}

				birthYear = (resno.charAt(6) <= '2') ? '19' : '20';
				birthYear += resno.substr(0, 2);
				birthMonth = resno.substr(2, 2) - 1;
				birthDate = resno.substr(4, 2);
				birth = new Date(birthYear, birthMonth, birthDate);

				if (birth.getYear() % 100 != resno.substr(0, 2) || birth.getMonth() != birthMonth || birth.getDate() != birthDate) {
					alert('잘못된 주민등록번호입니다.');
					return false;
				}

				buf = new Array(13);

				for (i = 0; i < 13; i++) {
					buf[i] = parseInt(resno.charAt(i));
				}

				multipliers = [2,3,4,5,6,7,8,9,2,3,4,5];

				for (i = 0, sum = 0; i < 12; i++) {
					sum += (buf[i] *= multipliers[i]);
				}

				if ((11 - (sum % 11)) % 10 != buf[12]) {
					alert('잘못된 주민등록번호입니다.');
					return false;
				}
				return true;
			},

			formatDate: function (date) {
				var mymonth = date.getMonth() + 1;
				var myweekday = date.getDate();
				return (date.getFullYear() + "-" + ((mymonth < 10) ? "0" : "") + mymonth + "-" + ((myweekday < 10) ? "0" : "") + myweekday);
			},


			setInputDate: function (month, sdateObj, edateObj){

				if(month>0){
					var settingDate = new Date();
					$("#"+edateObj).val(NDev.Valid.formatDate(settingDate));
					settingDate.setMonth(settingDate.getMonth()-month);
					$("#"+sdateObj).val(NDev.Valid.formatDate(settingDate));
				}
				else{
					$("#"+sdateObj).val("");
					$("#"+edateObj).val("");
				}
			}
		};
	
	var SNS = NFront.SNS = {
			
			Share : function(gb, title, target) {
				var o 		= "",
			  		device 	= (/Android/i.test(navigator.userAgent)) ? "and" : (/iPhone|iPad|iPod/i.test(navigator.userAgent)) ? "ios" : "pc"
			  			
				switch(gb)
				{
					case 0: //facebook
						o = {
							method:'popup',
							url:'http://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent(target),
							target : "SnS",
							size : "scrollbars=yes, resizable=yes, top=100, left=100, width=1024, height=600"
						};

						break;

					case 1: //kakaostory
						o = {
							method:'_tmpApp',
						};
						
						if(device == "pc") {
							Kakao.Story.share({
								url : target,
								text : title
							});

						} else if(device == "and" || device == "ios") {
							Kakao.Story.open({
				        		url : target,
				        		text : title,
				        		urlInfo: {
				        	        title: title,
				        	        desc: title,
				        	        name: title,
				        	        images: 'http://121.135.185.26:9001/resources/images/brand/main/brand-logo-800x400.gif'
				        	    }
				        	});

						}
						break;

					case 2: //band
						if(device == "pc" ) {
							o = {
								method:'popup',
								url:'http://www.band.us/plugin/share?body=' + encodeURIComponent(title) + encodeURIComponent('\r\n') + encodeURIComponent(target) + '&route=' + encodeURIComponent(target)
							};
						} else if(device == "and" || device == "ios") {
							o = {
				                method:'web2app',
				                a_param:'create/post?text=' + encodeURIComponent(title) + encodeURIComponent('\r\n') + encodeURIComponent(target),
				                g_param:'create/post?text=' + encodeURIComponent(title) + encodeURIComponent('\r\n') + encodeURIComponent(target),
				                a_store:'itms-apps://itunes.apple.com/app/id542613198?mt=8',
				                g_store:'market://details?id=com.nhn.android.band',
				                a_proto:'bandapp://',
				                g_proto:'scheme=bandapp;package=com.nhn.android.band'
							};
						}

						break;
						
					case 3: //kakaotalk
						o = {
							method:'_tmpApp',
						};

						if(device == "pc") {
							alert("PC환경에서 사용할 수 없습니다.");

						} else if(device == "and" || device == "ios") {
							 Kakao.Link.sendTalkLink({
								 label : title,
								 image : {
									 src: 'http://121.135.185.26:9001/resources/images/brand/main/brand-logo-800x400.gif',
									 width: '300',
							         height: '300'
								 },
								 webButton : {
									 text : title,
									 url : url
								 }
							 });
						}

						break;

					default:
						alert('지원하지 않는 SNS입니다.');

					return false;
				}

				switch(o.method)
			    {
					case 'location':
						document.location = o.url;
						break;

			        case 'popup':
			        	var popup = window.open(o.url, "_blank", "scrollbars=yes, resizable=yes, top=100, left=100, width=1024, height=600");
			        	if(popup == null || popup.screenLeft == 0) {
			        		alert("팝업차단 설정을 해제해주세요.");
			        	}
			            break;

			        case 'web2app':
			            if(device == "and")
			            {
			                // Android
			                setTimeout(function () {
			                	location.href = 'intent://' + o.g_param + '#Intent;' + o.g_proto + ';end'
							}, 1000);
			            }
			            else if(device == "ios")
			            {
			                // Apple
			            	setTimeout(function() { location.href = o.a_store }, 2000);
			            	setTimeout(function() { location.href = o.a_proto + o.a_param }, 1000);
			            }
			            break;

			        case '_tmpApp':
			        	break;

			        default:
						alert('지원하지 않는 SNS입니다.');
			    }
			}
		}
}));

